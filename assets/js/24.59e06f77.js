(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{539:function(v,_,s){v.exports=s.p+"assets/img/image-20210323120849478.0bbf4713.png"},540:function(v,_,s){v.exports=s.p+"assets/img/image-20210323134246999.d768b0b0.png"},628:function(v,_,s){"use strict";s.r(_);var t=s(6),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"拥塞控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拥塞控制"}},[v._v("#")]),v._v(" 拥塞控制")]),v._v(" "),t("p",[v._v("我们知道，在数据的传输过程的一整条数据链路中会经过非常多的设备，例如路由，交换机等等。而这当中的某些结点就有可能由于缓存容量太小而无法存储该数据报文，不得不丢弃，当这种情况的发生，便会使网络的性能变坏，这就叫做拥塞，即网络中某一资源的需求超过了该资源所能提供的可用部分。")]),v._v(" "),t("p",[v._v("所谓的拥塞控制就是"),t("strong",[v._v("防止过多的数据注入网络中，这样可以使网络中的某些设备不至于过载")]),v._v("，这是一个全局性的过程，涉及到所有的主机所有的路由器。")]),v._v(" "),t("p",[v._v("拥塞控制和流量控制的区别：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("流量控制考虑点对点的通信量的控制，抑制发送端发送数据的速率，以便接收方来得及接收")])]),v._v(" "),t("li",[t("p",[v._v("拥塞控制考虑整个网络，是全局性的考虑")])])]),v._v(" "),t("h2",{attrs:{id:"拥塞窗口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拥塞窗口"}},[v._v("#")]),v._v(" 拥塞窗口")]),v._v(" "),t("p",[v._v("拥塞控制的实现是基于"),t("strong",[v._v("拥塞窗口 cwnd")]),v._v(" 的，发送方会维持一个拥塞窗口的状态变量，它的大小取决于网络的拥塞程度。")]),v._v(" "),t("p",[v._v("发送方控制拥塞窗口的原则是：只要网络没有出现拥塞（超时），拥塞窗口就可以再增大，以便更多数据发送出去，这样就可以提高网络的利用率。但只要网络出现拥塞，就把拥塞窗口减小，以减少数据注入到网络中，缓解网络出现的拥塞。")]),v._v(" "),t("p",[v._v("另外我们需要与上文提到的流量控制实现的"),t("strong",[v._v("接收窗口 rwnd")]),v._v(" 做区分，它们是两个不同的状态变量")]),v._v(" "),t("ul",[t("li",[v._v("接收窗口是接收端给的限制")]),v._v(" "),t("li",[v._v("拥塞窗口是发送端给的限制")])]),v._v(" "),t("p",[v._v("cwnd 和 rwnd 都参与发送方窗口大小的限制")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("发送方窗口大小 = min(cwnd, rwnd)\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br")])]),t("h2",{attrs:{id:"拥塞控制算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拥塞控制算法"}},[v._v("#")]),v._v(" 拥塞控制算法")]),v._v(" "),t("p",[v._v("TCP 进行拥塞控制的算法有四种")]),v._v(" "),t("ul",[t("li",[v._v("慢启动")]),v._v(" "),t("li",[v._v("拥塞避免")]),v._v(" "),t("li",[v._v("快速重传")]),v._v(" "),t("li",[v._v("快速恢复")])]),v._v(" "),t("h3",{attrs:{id:"慢启动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#慢启动"}},[v._v("#")]),v._v(" 慢启动")]),v._v(" "),t("p",[v._v("慢启动算法的思路是：当主机开始发送数据时，由于不清楚网络的负荷情况，所以如果立即把大量数据字节注入到网络，那么就有可能出现网络拥塞。所以最好的方法是先探测一下，即"),t("strong",[v._v("由小到大逐渐增大发送窗口")]),v._v("，也就是逐渐增大 cwnd 的值。")]),v._v(" "),t("p",[v._v("在一开始发送方先设置 cwnd=1，发送第一个报文段，接收方收到后确认。发送方接收到确认后把 cwnd 增大到2，于是发送方发送两个报文段，接收方收到后发回两个确认。发送方接收到确认后把 cwnd 增大到4。。。。如此进行下去逐渐增大拥塞窗口")]),v._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:s(539),alt:"image-20210323120849478"}}),v._v(" "),t("p",[v._v("可以看出发送方"),t("strong",[v._v("每收到一个对新报文段的确认就让发送方的拥塞窗口加一")]),v._v("，也就是说，每经过一个"),t("strong",[v._v("传输轮次")]),v._v("拥塞窗口 cwnd 就加倍。一个传输轮次的时间就是往返时间 RTT。")]),v._v(" "),t("h3",{attrs:{id:"拥塞避免"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拥塞避免"}},[v._v("#")]),v._v(" 拥塞避免")]),v._v(" "),t("p",[v._v("由于慢启动算法增长拥塞窗口是指数级的，所以为了防止拥塞窗口增长过大而引起网络拥塞，还需要设置一个"),t("strong",[v._v("慢启动阈值 ssthresh")]),v._v(" 状态变量。其中")]),v._v(" "),t("ul",[t("li",[v._v("当 cwnd < ssthresh 时，使用慢启动算法")]),v._v(" "),t("li",[v._v("当 cwnd > ssthresh 时，使用拥塞避免算法")]),v._v(" "),t("li",[v._v("当 cwnd = ssthresh 时，既能使用慢启动算法，也能使用拥塞避免算法")])]),v._v(" "),t("p",[v._v("拥塞避免算法的思路是：让拥塞窗口缓慢增长，"),t("strong",[v._v("每经过一个往返 RTT 就把发送方的拥塞窗口 cwnd 加一")]),v._v("，这种按线性规律的增长就比慢启动加倍增长的速率缓慢得多了，使网络比较不容易出现拥塞。")]),v._v(" "),t("p",[v._v("另外，当网络中出现拥塞（超时）时，发送方便会有如下调整")]),v._v(" "),t("ol",[t("li",[v._v("设置 ssthresh = cwnd/2")]),v._v(" "),t("li",[v._v("同时设置 "),t("strong",[v._v("cwnd=1")])]),v._v(" "),t("li",[v._v("重新进入"),t("strong",[v._v("慢启动阶段")]),v._v("。")])]),v._v(" "),t("p",[v._v("有时个别报文段会在网络中丢失，但是实际上网络并没有发生拥塞。如果发送方迟迟没有收到确认，就会产生超时，便会误认为网络出现拥塞，从而重新进入慢启动阶段，把拥塞窗口设置为1，降低了传输效率。")]),v._v(" "),t("p",[v._v("为了尽量避免上面情况的出现，就需要采用"),t("strong",[v._v("快速重传算法")]),v._v("和"),t("strong",[v._v("快速恢复算法")])]),v._v(" "),t("h3",{attrs:{id:"快速重传"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#快速重传"}},[v._v("#")]),v._v(" 快速重传")]),v._v(" "),t("p",[v._v("采用快速重传算法可以让"),t("strong",[v._v("发送方尽早知道发生了个别报文段的丢失")]),v._v("。")]),v._v(" "),t("p",[v._v("快速重传算法的思路是：即使接收方收到了"),t("strong",[v._v("失序的报文段")]),v._v("也要立即发出对已收到的报文段的重复确认，发送方只要"),t("strong",[v._v("连续收到3个重复确认")]),v._v("，就立即进行重传，这样就不会出现超时，发送方也就不会误认为出现网络拥塞。")]),v._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:s(540),alt:"image-20210323134246999"}}),v._v(" "),t("p",[v._v("例如上面这个例子，在传输 M3 时发生了丢失，当接收方收到 M4、M5 和 M6 时都重复确认 M2，这样发送方收到3个重复确认就会认为接收方确实没有收到 M3，传输过程中发生了丢失，便立即重传 M3。")]),v._v(" "),t("h3",{attrs:{id:"快速恢复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#快速恢复"}},[v._v("#")]),v._v(" 快速恢复")]),v._v(" "),t("p",[v._v("当发送方连续收到3个重复确认时，就知道丢失了个别的报文段，于是不启用慢启动算法，而是执行快速恢复算法。")]),v._v(" "),t("ol",[t("li",[v._v("发送方会调整 ssthresh = cwnd/2")]),v._v(" "),t("li",[v._v("同时设置拥塞窗口 "),t("strong",[v._v("cwnd = ssthresh")])]),v._v(" "),t("li",[v._v("开始执行"),t("strong",[v._v("拥塞避免算法")])])])])}),[],!1,null,null,null);_.default=r.exports}}]);