(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{537:function(v,_,t){v.exports=t.p+"assets/img/image-20210309193817420.22f46baf.png"},626:function(v,_,t){"use strict";t.r(_);var a=t(6),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("p",[v._v("HTTP2 的特性主要有下面这几个：")]),v._v(" "),a("ul",[a("li",[v._v("头部压缩")]),v._v(" "),a("li",[v._v("多路复用")]),v._v(" "),a("li",[v._v("安全强化")]),v._v(" "),a("li",[v._v("服务器推送")]),v._v(" "),a("li",[v._v("请求优先级")])]),v._v(" "),a("p",[v._v("在了解特性之前，需要对 HTTP2 的协议栈有个大概的认识")]),v._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:t(537),alt:"image-20210309193817420"}}),v._v(" "),a("h2",{attrs:{id:"头部压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#头部压缩"}},[v._v("#")]),v._v(" 头部压缩")]),v._v(" "),a("p",[v._v("由于 HTTP 报文头部一般会携带 User Agent、Cookie、Accept、Server 等多个头字段，体积大，并且在许多请求响应报文里有很多字段值都是重复的，非常浪费，导致大量带宽消耗在这些冗余度极高的数据上面。")]),v._v(" "),a("p",[v._v("所以 HTTP2 把头部压缩作为性能改进的一个重点，其开发了专门的 "),a("strong",[v._v("HPack")]),v._v(" 算法，即在客户端和服务端两端建立字典，用索引号表示重复的字符串，还采用哈夫曼编码来压缩整数和字符串，可以达到 50% 到 90% 的高压缩率。")]),v._v(" "),a("h2",{attrs:{id:"多路复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[v._v("#")]),v._v(" 多路复用")]),v._v(" "),a("p",[v._v("在 HTTP1.1 中存在一些主要问题：")]),v._v(" "),a("ul",[a("li",[v._v("开启多个 TCP 长连接时 TCP 的慢启动以及每个连接之间相互竞争带宽")]),v._v(" "),a("li",[v._v("HTTP 队头阻塞的问题，每个请求都需要等待前一个请求完成之后才能去发起下一个")])]),v._v(" "),a("p",[v._v("那么如何解决这些问题呢？")]),v._v(" "),a("p",[v._v("针对多个 TCP 长连接的问题，因为 HTTP 底层还是用到了 TCP，所以我们不能把 TCP 换掉，但是我们能规避 TCP 慢启动和连接之间的竞争问题。办法就是"),a("strong",[v._v("一个域名只使用一个 TCP 长连接来传输数据")]),v._v("，这样页面资源下载便只需要一次慢启动，也避免了多个 TCP 连接竞争带宽。")]),v._v(" "),a("p",[v._v("针对 HTTP 队头阻塞的问题，我们需要在任何时候都可以将请求发送给服务器，并不需要等待其他请求的完成，服务器也能够返回处理好的请求资源给浏览器。")]),v._v(" "),a("p",[v._v("那么如何实现就需要理解 HTTP2 的"),a("strong",[v._v("多路复用")]),v._v("技术，即多个往返通信都复用一个连接来处理。从上面的协议栈可以看出，HTTP2 有一个 Stream 层来实现多路复用，即"),a("strong",[v._v("二进制分帧层")])]),v._v(" "),a("ul",[a("li",[v._v("首先浏览器准备好请求数据，包括请求行、请求头，如果是 POST 方法还有请求体")]),v._v(" "),a("li",[v._v("这些数据经过二进制分帧层处理后，会被转为一个个带有请求 ID 编号的帧，并将这些帧发送给服务器")]),v._v(" "),a("li",[v._v("服务器收到帧后，会将具有相同 ID 的帧合并为一条完整的请求信息")]),v._v(" "),a("li",[v._v("服务器处理完请求后，将响应数据发送给二进制分帧层做同样的处理发送给浏览器")])]),v._v(" "),a("p",[v._v("由于多个请求响应之间没有了顺序关系，都转为一个个二进制帧，不需要排队等待，也就不会有队头阻塞的问题。")]),v._v(" "),a("h2",{attrs:{id:"安全强化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全强化"}},[v._v("#")]),v._v(" 安全强化")]),v._v(" "),a("p",[v._v("出于兼容的考虑，HTTP2 延续了明文的特点，不强制使用加密通信。但是现代主流浏览器 Chrome、Firefox 都宣布只支持加密的 HTTP2，所以在互联网上通常看到的 HTTP2 都是使用 https 协议名的。")]),v._v(" "),a("p",[v._v("另外，对于加密版本的 HTTP2 对安全方面进行了强化，要求下层通信协议必须是 TLS1.2 以上，并且把一些弱密码套件加入到“黑名单”中，例如 DES、RC4 等等都不能在 HTTP2 里使用。")]),v._v(" "),a("h2",{attrs:{id:"服务器推送"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务器推送"}},[v._v("#")]),v._v(" 服务器推送")]),v._v(" "),a("p",[v._v("在 HTTP2 中，服务器不再是完全被动地响应请求，也可以主动向客户端发送消息。比如当用户请求一个 HTML 页面之后，服务器提前将页面可能用到的 JS、CSS 文件发给客户端，这样当浏览器解析 HTML 时，无需再向服务器去请求关键资源，对优化首屏时间起到至关重要的作用")]),v._v(" "),a("h2",{attrs:{id:"请求优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求优先级"}},[v._v("#")]),v._v(" 请求优先级")]),v._v(" "),a("p",[v._v("在浏览器中有些数据是非常重要的，但是在发送请求时，重要的请求有时可能会晚于那些不重要的请求，如果服务器按照请求的顺序来响应，那么重要的数据可能会被推迟很久才能到达服务器。")]),v._v(" "),a("p",[v._v("HTTP2 提供了请求优先级，可以在发送请求时，对请求标上优先级，那么服务器收到请求后会优先处理优先级高的请求。")])])}),[],!1,null,null,null);_.default=s.exports}}]);