(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{565:function(v,_,t){"use strict";t.r(_);var s=t(6),r=Object(s.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"进程与线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程与线程"}},[v._v("#")]),v._v(" 进程与线程")]),v._v(" "),t("p",[t("strong",[v._v("进程")]),v._v("是操作系统进行资源分配和调度的最小单位，一个进程就是一个程序的运行实例。"),t("strong",[v._v("线程")]),v._v("是操作系统进行运算的最小单位。一个程序至少有一个进程，一个进程至少有一个线程。线程依附于进程，在进程中使用多线程并行处理能提高效率。")]),v._v(" "),t("p",[v._v("进程和线程之间有以下几个特点：")]),v._v(" "),t("ol",[t("li",[v._v("进程中任意一个线程出现问题，都会导致整个进程运行奔溃。")]),v._v(" "),t("li",[v._v("线程之间能够共享进程中的数据")]),v._v(" "),t("li",[v._v("当进程关闭后，进程所占用的内存都会被回收，也就是即时进程当中某个线程发生内存泄露，进程关闭也会正确地回收这块内存")]),v._v(" "),t("li",[v._v("进程之间是相互隔离的，当一个进程奔溃了也不会影响到另一个进程的执行")])]),v._v(" "),t("h2",{attrs:{id:"浏览器的多进程架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的多进程架构"}},[v._v("#")]),v._v(" 浏览器的多进程架构")]),v._v(" "),t("p",[v._v("浏览器是多进程的，这一点你可以打开浏览器的任务管理器进行验证。")]),v._v(" "),t("p",[v._v("那么浏览器为什么要用多进程架构呢？你可以再回头看看上面说的进程和线程的特点，如果浏览器是多线程的话，那么当用户打开了多个页面，但其中一个页面运行出错奔溃了，这时候整个浏览器也都奔溃了；并且如果一个页面发生了重大的内存泄漏，其他页面也会收到影响，进而卡死。所以为了浏览器的稳定、流畅，使用多进程是最好的选择。")]),v._v(" "),t("p",[v._v("以 Chrome 浏览器为例，它包含了以下几个进程：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("浏览器主进程")]),v._v("：负责界面显示，用户交互，管理子进程")]),v._v(" "),t("li",[t("strong",[v._v("GPU进程")]),v._v("：处理其他进程的GPU任务，例如在渲染阶段利用GPU加速生成位图数据，对页面的渲染有很大的帮助。")]),v._v(" "),t("li",[t("strong",[v._v("网络进程")]),v._v("：负责页面的网络资源加载，例如当请求一个页面资源时就是由网络进程负责")]),v._v(" "),t("li",[t("strong",[v._v("扩展程序进程")]),v._v("：也就是浏览器的插件，每个插件都是一个独立的进程，这是为了隔离插件，保证插件的奔溃不会影响到浏览器")]),v._v(" "),t("li",[t("strong",[v._v("渲染进程")]),v._v("：默认情况下，我们打开的每个标签页都是一个独立的渲染进程，这也是为了浏览器的稳定性。它的任务是将HTML、CSS、JavaScript 转化为可以给用户交互的页面。")])]),v._v(" "),t("h2",{attrs:{id:"渲染进程-浏览器内核"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程-浏览器内核"}},[v._v("#")]),v._v(" 渲染进程（浏览器内核）")]),v._v(" "),t("p",[v._v("因为渲染进程很重要，所以我们单独拿出来讲一下。渲染进程是多线程的，它主要包含以下几个线程：")]),v._v(" "),t("ol",[t("li",[v._v("渲染引擎线程：负责解析html、css生成DOM树和布局树，当涉及到关键渲染路径中页面的回流和重绘都会触发该线程去执行；还有一点很重要，"),t("strong",[v._v("渲染引擎线程和 JS 引擎线程互斥")]),v._v("，当 JS 引擎在执行时渲染线程将被挂起，渲染更新会被保存到一个队列中，当 JS 引擎空闲时立即执行")]),v._v(" "),t("li",[v._v("JS 引擎线程：负责解析执行 javascript 脚本，会一直从任务队列中取出任务来执行。"),t("strong",[v._v("渲染引擎线程和 JS 引擎线程互斥")]),v._v("，所以如果 JS 引擎执行时间过长，会阻塞页面渲染，导致页面没有及时更新渲染。")]),v._v(" "),t("li",[v._v("事件触发线程：主要用来控制事件循环，管理着一个任务队列，当有事件被触发时，会将其回调函数添加进任务队列排队等待 JS 引擎执行")]),v._v(" "),t("li",[v._v("定时器线程：负责对setInterval与setTimeout的计时，计时完毕后将回调函数添加进任务队列")]),v._v(" "),t("li",[v._v("异步 http 请求线程：负责执行异步请求一类的函数的线程，如：Promise、ajax 等。")])]),v._v(" "),t("p",[v._v("存疑：既然渲染引擎线程和 JS 引擎线程是互斥的，那么为什么不将这两个线程合并为一个主线程呢？")])])}),[],!1,null,null,null);_.default=r.exports}}]);